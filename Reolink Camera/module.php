<?php

// needed for token access to the device
require_once(dirname(__FILE__, 2) . "/libs/accessHandler.php");

class ReolinkCamera extends IPSModule {

    // overwrite default create function
    public function Create() {
        parent::Create();

        // Needed values from the user
        $this->RegisterPropertyString("user", "admin");
        $this->RegisterPropertyString("password", "");
        $this->RegisterPropertyString("ip", "0.0.0.0");
    }

    // called on changes
    public function ApplyChanges() {
        parent::ApplyChanges();
        // TODO: Change the autogenerated stub
    }

    public function RequestAction($Ident, $Value) {
        // TODO: change on var
    }






    /***
     * @param string $cmd Command that should be executed
     * @param string $action Action type
     * @param string $param requested params
     * @return array
     */
    protected function cmd(string $cmd, string $action, string $param): array {

        $header_array = array(
            'Content-Type: application/json',
        );
        // build url
        $ip = $this->ReadPropertyString("ip");
        $user = $this->ReadPropertyString("user");
        $password = $this->ReadPropertyString("password");
        $url = "https://" . $ip . "/api.cgi?cmd=" . $cmd . "&token=" . accessHandler.getToken($ip, $user, $password) ;

        // configure curl options in array
        $curlOptions = array(
            CURLOPT_URL => $url,
            CURLOPT_HTTPHEADER => $header_array,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $param,
            CURLOPT_TIMEOUT => 10,
            CURLOPT_RETURNTRANSFER => true,
        );

        // initialize curl and call
        $ch = curl_init();
        curl_setopt_array($ch, $curlOptions);
        // ask
        $response = curl_exec($ch);
        // response url response saved
        curl_close($ch);

        return json_decode($response, true);
    }




    //============================================================ FORM.JSON

    /** This Function will return the IP Symcon needed form.json
     * @return false|string Form json
     */
    public function GetConfigurationForm() {
        // return current form
        $Form = json_encode([
            'elements' => $this->FormElements(),
            'actions'  => $this->FormActions(),
            'status'   => $this->FormStatus(),
        ]);
        $this->SendDebug('FORM', $Form, 0);
        $this->SendDebug('FORM', json_last_error_msg(), 0);

        return $Form;
    }

    /**
     * @return array[] Form Actions
     */
    protected function FormActions() {
        return[];
    }

    /**
     * @return array[] Form Elements
     */
    protected function FormElements() {
        return[
            [
                "type" => "RowLayout",
                "items" => [
                    [
                        "type" => "ColumnLayout",
                        "items" => [
                            [
                                "type" => "ValidationTextBox",
                                "name" => "user",
                                "caption" => "Username"
                            ],
                            [
                                "type" => "PasswordTextBox",
                                "name" => "password",
                                "caption" => "Password"
                            ]
                        ]
                    ],
                    [
                        "type" => "ValidationTextBox",
                        "name" => "ip",
                        "caption" => "IP-Address"
                    ]
                ]
            ]
        ];
    }

    protected function FormStatus() {
        return [
            [
                'code'    => 101,
                'icon'    => 'inactive',
                'caption' => 'Creating instance.',
            ],
            [
                'code'    => 102,
                'icon'    => 'active',
                'caption' => 'HomeConnect Dishwasher created.',
            ],
            [
                'code'    => 104,
                'icon'    => 'inactive',
                'caption' => 'interface closed.',
            ]
        ];
    }
}

?>